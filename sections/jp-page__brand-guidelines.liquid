{% comment %}
  Custom section created by JadePuma
  Instructions - https://jadepuma.com/blogs/shopify-tutorials/brand-guidelines-section-for-the-flex-theme
  Last editted - 10Oct24
{% endcomment %}

{%- assign id = section.id -%}

{% comment %} Section specific CSS {% endcomment %}
{%- capture section_css -%}

.section-heading {
text-align: center;
color: {{ section.settings.heading-color }}; 
background-color: {{ section.settings.heading-background-color }};
margin: 20px 0;
}
.inverse {
padding: 15px;
background-color: #333;
}
.brand-guidelines .heading-divider { margin: 10px 0 30px; }

.typo-table {
display: flex;
flex-direction: row;
align-items: center;
justify-content: center;
}

.typo-table div { padding: 10px; }

.banner__heading, .banner__subheading { background-color: #888888; padding: 10px; }

.color-palette {
  display: grid;
  grid-template-columns: 3fr 1fr 2fr;
  grid-template-rows: repeat(5, 1fr);
  grid-column-gap: 10px;
  grid-row-gap: 10px;
max-width: 350px;
margin: 0 auto;
}

.color-array {
  display: grid; 
  grid-auto-rows: 1fr; 
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr; 
  gap: 10px 10px; 
  justify-content: center; 
  align-content: center; 
  justify-items: center; 
  align-items: center; 
}
.color-array .color-swatch { height: 30px; width: 100%; }

.icon-grid {
  display: grid; 
  grid-auto-rows: 1fr; 
  grid-template-columns: 1fr 1fr 1fr 1fr; 
  gap: 10px 10px; 
  justify-content: center; 
  align-content: center; 
  justify-items: center; 
  align-items: center; 
}

.mood-board {
  display: grid; 
  grid-auto-rows: 1fr; 
  grid-template-columns: 1fr 1fr 1fr; 
  gap: 10px 10px; 
  justify-content: center; 
  align-content: center; 
  justify-items: center; 
  align-items: center; 
}


.brand-guidelines { margin-bottom: 25px; }

.brand-guidelines img { padding: 10px; }

{%- endcapture -%}

{% style %}
  #shopify-section-{{ id }} {
  padding-top: {{ section.settings.padding_top }}px;
  padding-bottom: {{ section.settings.padding_bottom }}px;
  padding-left: {{ section.settings.padding_left }}px;
  padding-right: {{ section.settings.padding_right }}px;
  {% if section.settings.width == 'wide' %}
  width: 100%;
  {% elsif section.settings.width == 'half' %}
  width: 50%;
  {% endif %}
  }

  {%
      render 'css-loop',
  css: section_css,
  id: id
  %}

  {%
      render 'css-loop',
  css: section.settings.custom_css,
  id: id
  %}
{% endstyle %}

{% assign icon-blocks = 0 %}
{% assign brand-blocks = 0 %}
{% assign mood-blocks = 0 %}
{% assign pattern-blocks = 0 %}
{% assign color-blocks = 0 %}

{% if section.blocks.size > 0 %}
  {% for block in section.blocks %}
    {% if block.type == 'iconography-image' %}
      {% assign icon-blocks = icon-blocks | plus: 1 %}
    {% elsif block.type == 'brand-image' %}
      {% assign brand-blocks = brand-blocks | plus: 1 %}
    {% elsif block.type == 'mood-image' %}
      {% assign mood-blocks = mood-blocks | plus: 1 %}
    {% elsif block.type == 'pattern-image' %}
      {% assign pattern-blocks = pattern-blocks | plus: 1 %}
    {% elsif block.type == 'color' %}
      {% assign color-blocks = color-blocks | plus: 1 %}
    {% endif %}
  {% endfor %}
{% endif %}

{% comment %} HTML markup {% endcomment %}
<section
  class="
    featured-video
    section
    {{ section.settings.css_class }}
    is-width-{{ section.settings.width }}
    {% if section.settings.mobile_text_below_video == true %}
    mobile-text--below-media
    {% else %}
    mobile-text--over-media
    {% endif %}
    {% if video_exists %} has-video-added {% endif %}
    video-controls-enabled--{{ section.settings.controls }}
  "
  {% if section.settings.animation != 'none' %}
    data-scroll-class="{{ section.settings.animation }}"
  {% endif %}
>
  <div
    class="
      container
      video__container
      {% if section.settings.width == 'wide' or section.settings.width == 'half' %}
      equal-columns--outside-trim
      {% endif %}
    "
  >
    <div class="one-whole column content">
      <div class="brand-guidelines">
        <h2 class="section-heading">Color Palette</h2>

        {% if color-blocks > 0 %}
          <div class="color-array">
            <div>Lightest</div>
            <div>Lighter</div>
            <div>Main</div>
            <div>Darker</div>
            <div>Darkest</div>
            {% for block in section.blocks %}
              {% if block.type == 'color' %}
                <div class="color-swatch" style="background-color: {{ block.settings.color-lightest }}"></div>
                <div class="color-swatch" style="background-color: {{ block.settings.color-lighter }}"></div>
                <div class="color-swatch" style="background-color: {{ block.settings.color }}"></div>
                <div class="color-swatch" style="background-color: {{ block.settings.color-darker }}"></div>
                <div class="color-swatch" style="background-color: {{ block.settings.color-darkest }}"></div>
                {% assign lightest = block.settings['color-lightest'] | remove: '#' %}
                <div>
                  <a href="https://www.colorhexa.com/{{ lightest }}" target="_blank">
                    {{- block.settings['color-lightest'] -}}
                  </a>
                </div>
                {% assign lighter = block.settings['color-lighter'] | remove: '#' %}
                <div>
                  <a href="https://www.colorhexa.com/{{ lighter }}" target="_blank">
                    {{- block.settings['color-lighter'] -}}
                  </a>
                </div>
                {% assign color = block.settings.color | remove: '#' %}
                <div>
                  <a href="https://www.colorhexa.com/{{ color }}" target="_blank">{{ block.settings.color }}</a>
                </div>
                {% assign darker = block.settings['color-darker'] | remove: '#' %}
                <div>
                  <a href="https://www.colorhexa.com/{{ darker }}" target="_blank">
                    {{- block.settings['color-darker'] -}}
                  </a>
                </div>
                {% assign darkest = block.settings['color-darkest'] | remove: '#' %}
                <div>
                  <a href="https://www.colorhexa.com/{{ darkest }}" target="_blank">
                    {{- block.settings['color-darkest'] -}}
                  </a>
                </div>
              {% endif %}
            {% endfor %}
          </div>
        {% endif %}

        <h3>Theme Color Settings</h3>
        <div class="color-palette">
          <div>Background</div>
          <div class="color-swatch" style="background-color: {{ settings.shop_bg_color }}"></div>
          <div>{{ settings.shop_bg_color }}</div>

          <div>Borders</div>
          <div class="color-swatch" style="background-color: {{ settings.border_color }}"></div>
          <div>{{ settings.border_color }}</div>

          <div>Heading Divider</div>
          <div class="color-swatch" style="background-color: {{ settings.divider_color }}"></div>
          <div>{{ settings.divider_color }}</div>

          <div>Header Background</div>
          <div class="color-swatch" style="background-color: {{ settings.header_background }}"></div>
          <div>{{ settings.header_background }}</div>

          <div>Cart Badge</div>
          <div class="color-swatch" style="background-color: {{ settings.header_cart_badge_color }}"></div>
          <div>{{ settings.header_cart_badge_color }}</div>

          <div>Cart Background</div>
          <div class="color-swatch" style="background-color: {{ settings.cart_background_color }}"></div>
          <div>{{ settings.cart_background_color }}</div>

          <div>Dropdown Background</div>
          <div class="color-swatch" style="background-color: {{ settings.dropdown_background }}"></div>
          <div>{{ settings.dropdown_background }}</div>

          <div>Footer Background</div>
          <div class="color-swatch" style="background-color: {{ settings.footer_background }}"></div>
          <div>{{ settings.footer_background }}</div>

          <div>Footer Border</div>
          <div class="color-swatch" style="background-color: {{ settings.footer_border }}"></div>
          <div>{{ settings.footer_border }}</div>
        </div>

        <h2 class="section-heading">Typography</h2>

        <p>{{ section.settings.typography }}</p>

        <div class="typo-table">
          <div>
            <p class="body-text">This is body text</p>
          </div>
          <div class="bodysettings"></div>
        </div>

        <script>
          document.addEventListener('DOMContentLoaded', function () {
            // Select the element with the class .body-text
            const bodyTextElement = document.querySelector('.typo-table .body-text');
            const bodySettingsElement = document.querySelector('.typo-table .bodysettings');
          
            if (bodyTextElement && bodySettingsElement) {
              // Get the computed styles of the .body-text element
              const computedStyles = window.getComputedStyle(bodyTextElement);
          
              // Extract the desired properties
              const fontFamily = computedStyles.fontFamily;
              const fontStyle = computedStyles.fontStyle;
              const fontWeight = computedStyles.fontWeight;
              const fontSize = computedStyles.fontSize;
              const color = computedStyles.color;
          
              // Function to convert RGB to HEX
              function rgbToHex(rgb) {
                const rgbValues = rgb.match(/\d+/g);
                return rgbValues
                  ? `#${((1 << 24) + (parseInt(rgbValues[0]) << 16) + (parseInt(rgbValues[1]) << 8) + parseInt(rgbValues[2]))
                      .toString(16)
                      .slice(1)}`
                  : rgb;
              }
          
              // Convert the color to HEX format
              const colorHex = rgbToHex(color);
          
              // Create a string with the extracted values
              const styleInfo = `
                Font Family: ${fontFamily}<br>
                Font Style: ${fontStyle}<br>
                Font Weight: ${fontWeight}<br>
                Font Size: ${fontSize}<br>
                Color: ${colorHex}
              `;
          
              // Set the innerHTML of the .bodysettings element with the extracted values
              bodySettingsElement.innerHTML = styleInfo;
            }
          });
        </script>

        <div class="heading-divider heading-divider--long"></div>

        <div class="typo-table">
          <div>
            <div class="header">
              <div class="header__menu is-justify-center">
                <nav
                  class="header__menu-items is-flex is-flex-wrap is-justify-center header__dropdown--below-parent"
                  role="navigation"
                  aria-label="main navigation"
                >
                  <div class="navbar-item header__item" data-navlink-handle="our-services">
                    <label for="mega-our-services">
                      <a href="#" class="navbar-link header__link  is-arrowless">Menu Item</a>
                    </label>
                  </div>
                </nav>
              </div>
            </div>
          </div>
          <div class="navbarsettings"></div>
        </div>

        <script>
          document.addEventListener('DOMContentLoaded', function () {
            // Select the element with the class .navbar-item
            const navbarItemElement = document.querySelector('.typo-table .navbar-item');
            const navbarSettingsElement = document.querySelector('.typo-table .navbarsettings');
          
            if (navbarItemElement && navbarSettingsElement) {
              // Get the computed styles of the .navbar-item element
              const computedStyles = window.getComputedStyle(navbarItemElement);
          
              // Extract the desired properties
              const fontFamily = computedStyles.fontFamily;
              const fontStyle = computedStyles.fontStyle;
              const fontWeight = computedStyles.fontWeight;
              const fontSize = computedStyles.fontSize;
              const color = computedStyles.color;
          
              // Function to convert RGB color to HEX
              function rgbToHex(rgb) {
                const result = rgb.match(/\d+/g);
                if (result) {
                  const r = parseInt(result[0], 10).toString(16).padStart(2, '0');
                  const g = parseInt(result[1], 10).toString(16).padStart(2, '0');
                  const b = parseInt(result[2], 10).toString(16).padStart(2, '0');
                  return `#${r}${g}${b}`;
                }
                return rgb; // Return the original value if the format is not recognized
              }
          
              // Convert the color to HEX format
              const hexColor = rgbToHex(color);
          
              // Create a string with the extracted values
              const styleInfo = `
                Font Family: ${fontFamily}<br>
                Font Style: ${fontStyle}<br>
                Font Weight: ${fontWeight}<br>
                Font Size: ${fontSize}<br>
                Color: ${hexColor}
              `;
          
              // Set the innerHTML of the .navbarsettings element with the extracted values
              navbarSettingsElement.innerHTML = styleInfo;
            }
          });
        </script>

        <div class="heading-divider heading-divider--long"></div>

        <div class="typo-table">
          <div>
            <div class="buttons is-center text-link">
              <a href="#">Text Link</a>
            </div>
          </div>
          <div class="text-link-settings"></div>
        </div>

        <script>
          document.addEventListener('DOMContentLoaded', function () {
            // Select the element with the class .text-link
            const bodyTextElement = document.querySelector('.typo-table .text-link');
            const bodySettingsElement = document.querySelector('.typo-table .text-link-settings');
          
            if (bodyTextElement && bodySettingsElement) {
              // Get the computed styles of the .text-link element
              const computedStyles = window.getComputedStyle(bodyTextElement);
          
              // Extract the desired properties
              const fontFamily = computedStyles.fontFamily;
              const fontStyle = computedStyles.fontStyle;
              const fontWeight = computedStyles.fontWeight;
              const fontSize = computedStyles.fontSize;
              const color = computedStyles.color;
          
              // Function to convert RGB to HEX
              function rgbToHex(rgb) {
                const rgbValues = rgb.match(/\d+/g);
                return rgbValues
                  ? `#${((1 << 24) + (parseInt(rgbValues[0]) << 16) + (parseInt(rgbValues[1]) << 8) + parseInt(rgbValues[2]))
                      .toString(16)
                      .slice(1)}`
                  : rgb;
              }
          
              // Convert the color to HEX format
              const colorHex = rgbToHex(color);
          
              // Create a string with the extracted values
              const styleInfo = `
                Font Family: ${fontFamily}<br>
                Font Style: ${fontStyle}<br>
                Font Weight: ${fontWeight}<br>
                Font Size: ${fontSize}<br>
                Color: ${colorHex}
              `;
          
              // Set the innerHTML of the .text-link-settings element with the extracted values
              bodySettingsElement.innerHTML = styleInfo;
            }
          });
        </script>

        <div class="typo-table">
          <div>
            <div class="buttons is-center"><a href="#" class="button button--primary ">Primary Button</a></div>
          </div>
          <div class="primary-button-settings"></div>
        </div>

        <div class="typo-table">
          <div>
            <div class="buttons is-center"><a href="#" class="button button--secondary ">Secondary Button</a></div>
          </div>
          <div class="secondary-button-settings"></div>
        </div>
        <div class="typo-table">
          <div>
            <button
              type="submit"
              name="add"
              class="button action_button button--add-to-cart action_button--primary"
              data-label="Add to cart"
              data-add-to-cart-trigger=""
            >
              <span class="text">Add to cart</span>
            </button>
          </div>
          <div class="add-to-cart-button-settings"></div>
        </div>

        <div class="heading-divider heading-divider--long"></div>

        <div class="typo-table">
          <div>
            <p class="heading-section__preheading">Pre-Heading</p>
          </div>
          <div class="preheading-settings"></div>
        </div>

        <script>
          document.addEventListener('DOMContentLoaded', function () {
            // Select the element with the class .heading-section__preheading
            const bodyTextElement = document.querySelector('.typo-table .heading-section__preheading');
            const bodySettingsElement = document.querySelector('.typo-table .preheading-settings');
          
            if (bodyTextElement && bodySettingsElement) {
              // Get the computed styles of the .heading-section__preheading element
              const computedStyles = window.getComputedStyle(bodyTextElement);
          
              // Extract the desired properties
              const fontFamily = computedStyles.fontFamily;
              const fontStyle = computedStyles.fontStyle;
              const fontWeight = computedStyles.fontWeight;
              const fontSize = computedStyles.fontSize;
              const color = computedStyles.color;
          
              // Function to convert RGB to HEX
              function rgbToHex(rgb) {
                const rgbValues = rgb.match(/\d+/g);
                return rgbValues
                  ? `#${((1 << 24) + (parseInt(rgbValues[0]) << 16) + (parseInt(rgbValues[1]) << 8) + parseInt(rgbValues[2]))
                      .toString(16)
                      .slice(1)}`
                  : rgb;
              }
          
              // Convert the color to HEX format
              const colorHex = rgbToHex(color);
          
              // Create a string with the extracted values
              const styleInfo = `
                Font Family: ${fontFamily}<br>
                Font Style: ${fontStyle}<br>
                Font Weight: ${fontWeight}<br>
                Font Size: ${fontSize}<br>
                Color: ${colorHex}
              `;
          
              // Set the innerHTML of the .preheading-settings element with the extracted values
              bodySettingsElement.innerHTML = styleInfo;
            }
          });
        </script>

        <div class="heading-divider heading-divider--long"></div>

        <div class="typo-table">
          <div>
            <h1 class="heading1">This is H1 text</h1>
          </div>
          <div class="heading1settings"></div>
        </div>

        <div class="typo-table">
          <div>
            <h2 class="heading2">This is H2 text</h2>
          </div>
          <div class="heading2settings"></div>
        </div>

        <div class="typo-table">
          <div>
            <h3 class="heading3">This is H3 text</h3>
          </div>
          <div class="heading3settings"></div>
        </div>

        <div class="typo-table">
          <div>
            <h4 class="heading4">This is H4 text</h4>
          </div>
          <div class="heading4settings"></div>
        </div>

        <div class="typo-table">
          <div>
            <h5 class="heading5">This is H5 text</h5>
          </div>
          <div class="heading5settings"></div>
        </div>

        <script>
  // Define an array of heading levels and corresponding class suffixes
  const headingLevels = [1, 2, 3, 4, 5];

  headingLevels.forEach((level) => {
    // Construct class names dynamically
    const headingClass = `heading${level}`;
    const settingsClass = `heading${level}settings`;

    // Select the elements
    const headingElement = document.querySelector(`.${headingClass}`);
    const settingsElement = document.querySelector(`.${settingsClass}`);

    if (headingElement && settingsElement) {
      // Get the computed styles of the element
      const styles = window.getComputedStyle(headingElement);

      // Extract the desired properties
      const cssProperties = {
        'font-family': styles.getPropertyValue('font-family'),
        'font-style': styles.getPropertyValue('font-style'),
        'font-weight': styles.getPropertyValue('font-weight'),
        'font-size': styles.getPropertyValue('font-size'),
        'color': rgbToHex(styles.getPropertyValue('color'))
      };

      // Create a formatted string of the desired properties
      let cssText = '';
      for (const [property, value] of Object.entries(cssProperties)) {
        cssText += `${property}: ${value};\n`;
      }

      // Display the CSS properties inside the settings element
      settingsElement.style.whiteSpace = 'pre'; // Preserve new lines in CSS properties
      settingsElement.style.padding = '10px';
      settingsElement.textContent = cssText;
    } else {
      console.log(`Element with class "${headingClass}" or "${settingsClass}" not found on this page.`);
    }
  });

  // Helper function to convert RGB color to HEX format
  function rgbToHex(rgb) {
    // Extract the rgb values using regex
    const rgbValues = rgb.match(/\d+/g);
    if (rgbValues && rgbValues.length >= 3) {
      return (
        '#' +
        rgbValues
          .slice(0, 3) // Take the first three values (r, g, b)
          .map((num) => parseInt(num).toString(16).padStart(2, '0')) // Convert to hex and pad
          .join('')
      );
    }
    return rgb; // Fallback to the original value if conversion fails
  }
        </script>

        <div class="heading-divider heading-divider--long"></div>

        <div class="typo-table">
          <div>
            <p class="heading-section__subheading">Sub-Heading</p>
          </div>
          <div class="subheading-settings"></div>
        </div>

        <script>
          document.addEventListener('DOMContentLoaded', function () {
            // Select the element with the class .heading-section__subheading
            const bodyTextElement = document.querySelector('.typo-table .heading-section__subheading');
            const bodySettingsElement = document.querySelector('.typo-table .subheading-settings');
          
            if (bodyTextElement && bodySettingsElement) {
              // Get the computed styles of the .heading-section__subheading element
              const computedStyles = window.getComputedStyle(bodyTextElement);
          
              // Extract the desired properties
              const fontFamily = computedStyles.fontFamily;
              const fontStyle = computedStyles.fontStyle;
              const fontWeight = computedStyles.fontWeight;
              const fontSize = computedStyles.fontSize;
              const color = computedStyles.color;
          
              // Function to convert RGB to HEX
              function rgbToHex(rgb) {
                const rgbValues = rgb.match(/\d+/g);
                return rgbValues
                  ? `#${((1 << 24) + (parseInt(rgbValues[0]) << 16) + (parseInt(rgbValues[1]) << 8) + parseInt(rgbValues[2]))
                      .toString(16)
                      .slice(1)}`
                  : rgb;
              }
          
              // Convert the color to HEX format
              const colorHex = rgbToHex(color);
          
              // Create a string with the extracted values
              const styleInfo = `
                Font Family: ${fontFamily}<br>
                Font Style: ${fontStyle}<br>
                Font Weight: ${fontWeight}<br>
                Font Size: ${fontSize}<br>
                Color: ${colorHex}
              `;
          
              // Set the innerHTML of the .subheading-settings element with the extracted values
              bodySettingsElement.innerHTML = styleInfo;
            }
          });
        </script>

        <div class="heading-divider heading-divider--long"></div>

        <div class="typo-table">
          <div>
            <p class="banner__heading">Banner Heading</p>
          </div>
          <div class="banner-heading-settings"></div>
        </div>

        <script>
          document.addEventListener('DOMContentLoaded', function () {
            // Select the element with the class .banner__heading
            const bodyTextElement = document.querySelector('.typo-table .banner__heading');
            const bodySettingsElement = document.querySelector('.typo-table .banner-heading-settings');
          
            if (bodyTextElement && bodySettingsElement) {
              // Get the computed styles of the .banner__heading element
              const computedStyles = window.getComputedStyle(bodyTextElement);
          
              // Extract the desired properties
              const fontFamily = computedStyles.fontFamily;
              const fontStyle = computedStyles.fontStyle;
              const fontWeight = computedStyles.fontWeight;
              const fontSize = computedStyles.fontSize;
              const color = computedStyles.color;
          
              // Function to convert RGB to HEX
              function rgbToHex(rgb) {
                const rgbValues = rgb.match(/\d+/g);
                return rgbValues
                  ? `#${((1 << 24) + (parseInt(rgbValues[0]) << 16) + (parseInt(rgbValues[1]) << 8) + parseInt(rgbValues[2]))
                      .toString(16)
                      .slice(1)}`
                  : rgb;
              }
          
              // Convert the color to HEX format
              const colorHex = rgbToHex(color);
          
              // Create a string with the extracted values
              const styleInfo = `
                Font Family: ${fontFamily}<br>
                Font Style: ${fontStyle}<br>
                Font Weight: ${fontWeight}<br>
                Font Size: ${fontSize}<br>
                Color: ${colorHex}
              `;
          
              // Set the innerHTML of the .banner-heading-settings element with the extracted values
              bodySettingsElement.innerHTML = styleInfo;
            }
          });
        </script>

        <div class="typo-table">
          <div>
            <p class="banner__subheading">This is Banner Text</p>
          </div>
          <div class="banner-subheading-settings"></div>
        </div>

        <script>
          document.addEventListener('DOMContentLoaded', function () {
            // Select the element with the class .banner__subheading
            const bodyTextElement = document.querySelector('.typo-table .banner__subheading');
            const bodySettingsElement = document.querySelector('.typo-table .banner-subheading-settings');
          
            if (bodyTextElement && bodySettingsElement) {
              // Get the computed styles of the .banner__subheading element
              const computedStyles = window.getComputedStyle(bodyTextElement);
          
              // Extract the desired properties
              const fontFamily = computedStyles.fontFamily;
              const fontStyle = computedStyles.fontStyle;
              const fontWeight = computedStyles.fontWeight;
              const fontSize = computedStyles.fontSize;
              const color = computedStyles.color;
          
              // Function to convert RGB to HEX
              function rgbToHex(rgb) {
                const rgbValues = rgb.match(/\d+/g);
                return rgbValues
                  ? `#${((1 << 24) + (parseInt(rgbValues[0]) << 16) + (parseInt(rgbValues[1]) << 8) + parseInt(rgbValues[2]))
                      .toString(16)
                      .slice(1)}`
                  : rgb;
              }
          
              // Convert the color to HEX format
              const colorHex = rgbToHex(color);
          
              // Create a string with the extracted values
              const styleInfo = `
                Font Family: ${fontFamily}<br>
                Font Style: ${fontStyle}<br>
                Font Weight: ${fontWeight}<br>
                Font Size: ${fontSize}<br>
                Color: ${colorHex}
              `;
          
              // Set the innerHTML of the .banner-subheading-settings element with the extracted values
              bodySettingsElement.innerHTML = styleInfo;
            }
          });
        </script>

        {% if section.settings['show-logos'] %}
          <div class="logos">
            <h2 class="section-heading">Logos</h2>

            {% if section.settings['logo-color'] %}
              {%- assign image = section.settings['logo-color'] -%}
              <h3>Color Logo</h3>
              {% render 'image-element', image: image, alt: 'Color Logo' %}
              <div class="heading-divider heading-divider--long"></div>
            {% endif %}

            {% if section.settings['logo-monochrome'] %}
              {%- assign image = section.settings['logo-monochrome'] -%}
              <h3>Monochrome Logo</h3>
              {% render 'image-element', image: image, alt: 'Monochrome Logo' %}
              <div class="heading-divider heading-divider--long"></div>
            {% endif %}

            {% if section.settings['logo-small'] %}
              {%- assign image = section.settings['logo-small'] -%}
              <h3>Small Logo</h3>
              {% render 'image-element', image: image, alt: 'Small Logo' %}
              <div class="heading-divider heading-divider--long"></div>
            {% endif %}

            {% if section.settings['logo-vertical'] %}
              {%- assign image = section.settings['logo-vertical'] -%}
              <h3>Vertical Logo</h3>
              {% render 'image-element', image: image, alt: 'Vertical Logo' %}
              <div class="heading-divider heading-divider--long"></div>
            {% endif %}

            {% if section.settings['logo-inverse'] %}
              {%- assign image = section.settings['logo-inverse'] -%}
              <h3>Inverse Logo</h3>
              <div class="inverse">
                {% render 'image-element', image: image, alt: 'Inverse Logo' %}
              </div>
              <div class="heading-divider heading-divider--long"></div>
            {% endif %}

            {% if section.settings['logo-icon'] %}
              {%- assign image = section.settings['logo-icon'] -%}
              <h3>Icon Logo</h3>
              {% render 'image-element', image: image, alt: 'icon Logo' %}
              <div class="heading-divider heading-divider--long"></div>
            {% endif %}

            {% if section.settings['logo-font'] != '' %}
              <p>Logo Font - {{ section.settings['logo-font'] }}</p>
            {% endif %}
          </div>
        {% endif %}

        {% if section.settings['show-shopify-brand-settings'] %}
          <h2 class="section-heading">Shopify Brand Setttings</h2>
          <h3>Brand Colors</h3>
          <div class="color-array">
            {% if shop.brand.colors.primary[0].background != blank %}
              <div>
                Primary Background - {{ shop.brand.colors.primary[0].background }}
                <br>
                <div class="color-swatch" style="background-color: {{ shop.brand.colors.primary[0].background }}">
                  &nbsp;
                </div>
              </div>
            {% endif %}
            {% if shop.brand.colors.primary[0].foreground != blank %}
              <div>
                Primary Foreground - {{ shop.brand.colors.primary[0].foreground }}
                <br>
                <div class="color-swatch" style="background-color: {{ shop.brand.colors.primary[0].foreground }}">
                  &nbsp;
                </div>
              </div>
            {% endif %}
            {% if shop.brand.colors.secondary[0].background != blank %}
              <div>
                Primary Background - {{ shop.brand.colors.secondary[0].background }}
                <br>
                <div class="color-swatch" style="background-color: {{ shop.brand.colors.secondary[0].background }}">
                  &nbsp;
                </div>
              </div>
            {% endif %}
            {% if shop.brand.colors.secondary[1].background != blank %}
              <div>
                Primary Background - {{ shop.brand.colors.secondary[1].background }}
                <br>
                <div class="color-swatch" style="background-color: {{ shop.brand.colors.secondary[1].background }}">
                  &nbsp;
                </div>
              </div>
            {% endif %}
            {% if shop.brand.colors.secondary[0].foreground != blank %}
              <div>
                Primary Background - {{ shop.brand.colors.secondary[0].foreground }}
                <br>
                <div class="color-swatch" style="background-color: {{ shop.brand.colors.secondary[0].foreground }}">
                  &nbsp;
                </div>
              </div>
            {% endif %}
          </div>

          <h3>Logos</h3>

          {% if shop.brand.logo != blank %}
            {%- assign image = shop.brand.logo -%}
            <h4>Brand Logo</h4>
            {% render 'image-element', image: image, alt: 'Color Logo' %}
          {% endif %}

          {% if shop.brand.square_logo != blank %}
            {%- assign image = shop.brand.square_logo -%}
            <h4>Square Logo</h4>
            {% render 'image-element', image: image, alt: 'Square Logo' %}
          {% endif %}

          {%- assign image = page_image | img_url -%}
          <h4>Social Logo</h4>
          <img src="{{ page_image | img_url }}">

          <h3>Short Description</h3>
          <p>{{ shop.brand.short_description }}</p>
          <h3>Slogan</h3>
          <p>{{ shop.brand.slogan }}</p>
        {% endif %}
      </div>
    </div>
  </div>
</section>

{% schema %}
{
"name": "JP Brand guidelines",
"class": "brand-guidelines-section overlaid-header-option",
"templates": ["page"],
"settings": [
      {
        "type": "paragraph",
        "content": "[See demo](https://flexthemesections.com/pages/jp-brand-guidelines-tool)"
      },
{
"type": "header",
"content": "Section headings"
},
{
"type": "color",
"id": "heading-color",
"label": "Text"
},
{
"type": "color",
"id": "heading-background-color",
"label": "Background"
},
{
"type": "header",
"content": "Logos"
},
{
"type": "checkbox",
"id": "show-logos",
"label": "Show section",
"default": false
},
{
"type": "text",
"id": "logo-font",
"label": "Logo font"
},
{
"type": "image_picker",
"id": "logo-color",
"label": "Color Logo"
},
{
"type": "image_picker",
"id": "logo-monochrome",
"label": "Monochrome Logo"
},
{
"type": "image_picker",
"id": "logo-small",
"label": "Small Logo"
},
{
"type": "image_picker",
"id": "logo-vertical",
"label": "Vertical Logo"
},
{
"type": "image_picker",
"id": "logo-inverse",
"label": "Inverse Logo"
},
{
"type": "image_picker",
"id": "logo-icon",
"label": "Icon Logo"
},
{
"type": "header",
"content": "Typography"
},
{
"type": "textarea",
"id": "typography",
"label": "Explanation"
},
{
"type": "header",
"content": "Shopify Brand Settings"
},
{
"type": "checkbox",
"id": "show-shopify-brand-settings",
"label": "Show Shopify brand settings",
"default": false
},
{
"type": "header",
"content": "Layout"
},
{
"type": "select",
"id": "width",
"label": "Width",
"default": "standard",
"options": [
{
"value": "half",
"label": "Half"
},
{
"value": "standard",
"label": "Standard"
},
{
"value": "wide",
"label": "Wide"
}
]
},
{
"type": "range",
"id": "padding_top",
"label": "Top spacing",
"min": 0,
"max": 80,
"default": 0,
"unit": "px"
},
{
"type": "range",
"id": "padding_bottom",
"label": "Bottom spacing",
"min": 0,
"max": 80,
"default": 0,
"unit": "px"
},
{
"type": "range",
"id": "padding_left",
"label": "Left spacing",
"min": 0,
"max": 80,
"default": 0,
"unit": "px"
},
{
"type": "range",
"id": "padding_right",
"label": "Right spacing",
"default": 0,
"min": 0,
"max": 80,
"unit": "px"
},
{
"type": "select",
"id": "animation",
"label": "Animation",
"default": "none",
"options": [
{
"value": "none",
"label": "None"
},
{
"value": "fadeIn",
"label": "Fade in"
},
{
"value": "fadeInDown",
"label": "Fade in down"
},
{
"value": "fadeInLeft",
"label": "Fade in left"
},
{
"value": "fadeInRight",
"label": "Fade in right"
},
{
"value": "slideInLeft",
"label": "Slide in left"
},
{
"value": "slideInRight",
"label": "Slide in right"
},
{
"value": "zoomIn",
"label": "Zoom in"
}
]
},
{
"type": "header",
"content": "Advanced",
"info": "[Learn more](https://help.outofthesandbox.com/hc/en-us/articles/360022329373)"
},
{
"type": "text",
"id": "css_class",
"label": "CSS Class"
},
{
"type": "textarea",
"id": "custom_css",
"label": "Custom CSS"
}
],
  "blocks": [
    {
      "type": "color",
      "name": "Color",
      "settings": [
        {
          "type": "color",
          "id": "color-lightest",
          "label": "Lightest"
        },
        {
          "type": "color",
          "id": "color-lighter",
          "label": "Lighter"
        },
        {
          "type": "color",
          "id": "color",
          "label": "Main Color"
        },
        {
          "type": "color",
          "id": "color-darker",
          "label": "Darker"
        },
        {
          "type": "color",
          "id": "color-darkest",
          "label": "Darkest"
        }
      ]
    }
  ],
"presets": [{
"name": "JP Brand guidelines",
"category": "JadePuma"
}]
}
{% endschema %}
